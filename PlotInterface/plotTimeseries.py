#!/usr/bin/env python
"""
    Tropical Cyclone Risk Model (TCRM) - Version 1.0 (beta release)
    Copyright (C) 2011  Geoscience Australia

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


Title: plotTimeseries.py - plot timeseries data generated by TCRM
Author: Craig Arthur, craig.arthur@ga.gov.au
CreationDate: 2009-05-21 14:13:44
Description: Load timeseries data generated by TCRM and plot the wind
             speed, component wind speeds and bearing.

SeeAlso: timeseries.py
Constraints:
Version: $Rev: 662 $

$Id: plotTimeseries.py 662 2011-10-31 05:40:14Z nsummons $
"""

import os, sys, pdb, logging

import matplotlib.pyplot as pyplot
import re
import numpy

from Utilities.metutils import convert
import Utilities.files as files

def _plot(data, stnInfo, outputFile):
    """
    Internal function to plot the data. This is called either once, or
    multiple times.
    Input: data - array (N,4) of time, wind speed, u (eastward) and v
                  (northward) components
           stnInfo - dictionary containing station ID, longitude and
                     latitude
           outputFile - path to which the resulting image will be saved
    Output: None - images are saved to the given filename
    """
    # Extract the data from the input array:
    t = data[0,:]
    s = data[1,:]
    u = data[2,:]
    v = data[3,:]
    b = data[4,:]
    p = data[5,:]

    # Plot the gust wind speed:
    pyplot.subplot(411)
    pyplot.subplots_adjust(left=0.125, bottom=0.1)
    pyplot.plot(t, s, 'g-')
    pyplot.ylabel('Wind speed (m/s)', fontsize=8)
    pyplot.yticks(fontsize=8)
    #pyplot.xticks(fontsize=8)
    pyplot.legend((r'Gust wind speed',), loc=2)
    pyplot.grid(True)
    pyplot.title('Station ID: %s (%6.2fE, %6.2fS)'%(stnInfo['ID'],
                 stnInfo['lon'], stnInfo['lat']))

    # Plot the components:
    pyplot.subplot(412)
    pyplot.plot(t, u, 'r-', t, v, 'b-')
    pyplot.axhline(color='k', linewidth=2)
    pyplot.ylabel('Wind speed (m/s)', fontsize=8)
    pyplot.yticks(fontsize=8)
    #pyplot.xticks(fontsize=8)
    pyplot.grid(True)
    pyplot.legend((r'U (eastward)', r'V (northward)'), loc=2 )

    # Plot the bearing:
    pyplot.subplot(413)
    pyplot.plot(t, b, 'g-')
    pyplot.ylabel('Wind direction ($^{\circ}$N)', fontsize=8)
    pyplot.ylim((0, 360))
    pyplot.yticks(numpy.arange(0, 361, 45), fontsize=8)
    #pyplot.xticks(fontsize=8)
    pyplot.axhline(y=180, color='k', linewidth=2)
    pyplot.legend((r'Wind direction',), loc=2)
    pyplot.grid(True)

    # Plot the pressure:
    pyplot.subplot(414)
    pyplot.plot(t, convert(p, 'Pa', 'hPa'), 'r-')
    pyplot.ylabel('Pressure (hPa)', fontsize=8)
    pyplot.yticks(fontsize=8)
    pyplot.ylim((900,1010))
    pyplot.legend((r'Mean sea level pressure',), loc=2)
    pyplot.grid(True)
    pyplot.xlabel('Time (hours)', fontsize=8)

    # Save the image:
    pyplot.savefig(outputFile)
    return

def plotTimeseries(inputPath, outputPath, locID=None):
    """
    Load the data and pass it to the internal function _plot()
    Input: inputPath - path to the raw timeseries data
           outputPath - path to the location that images should be
                        stored in
           locID - unique identifier for a chosen location. If not
                   given, all files in the input path will be processed
    Output: None. Images are saved to file
    Example: plotTimeseries('/tcrm/output/timeseries','/tcrm/output/plots')
    """
    if locID:
        # Only plot the data corresponding to the requested location ID:
        inputFile = os.path.join(inputPath, 'ts.%s.dat' % (locID))
        outputFile = os.path.join(outputPath, 'ts.%s.eps' % (locID))
        inputData = files.flLoadFile(inputFile, comments='%', delimiter=',')
        data = numpy.array([inputData[:,0], inputData[:,3], inputData[:,4],
                            inputData[:,5], inputData[:,6], inputData[:,7]])
        stnInfo = {'ID': locID, 'lon': inputData[0,1], 'lat': inputData[0,2]}
        _plot(data, stnInfo, outputFile)
    else:
        inputFileList = os.listdir(inputPath)
        for f in inputFileList:
            inputFile = os.path.join(inputPath,f)
            # Here we assume the timeseries files are named ts.<location ID>.dat
            locID = f.rstrip('.dat').lstrip('ts.')
            outputFile = os.path.join(outputPath, '%s.png' % f.rstrip('.dat'))
            inputData = files.flLoadFile(inputFile,comments='%', delimiter=',')
            data = numpy.array([inputData[:,0], inputData[:,3],
                                inputData[:,4], inputData[:,5],
                                inputData[:,6], inputData[:,7]])
            stnInfo = {'ID':locID, 'lon':inputData[0,1], 'lat':inputData[0,2]}
            _plot(data,stnInfo, outputFile)
            pyplot.clf()

if __name__ == '__main__':
    plotTimeseries(sys.argv[1], sys.argv[2])
