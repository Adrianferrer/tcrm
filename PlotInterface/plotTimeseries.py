"""
    Tropical Cyclone Risk Model (TCRM) - Version 1.0 (beta release)
    Copyright (C) 2011 Commonwealth of Australia (Geoscience Australia)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


Title: plotTimeseries.py - plot timeseries data generated by TCRM
Author: Craig Arthur, craig.arthur@ga.gov.au
CreationDate: 2009-05-21 14:13:44
Description: Load timeseries data generated by TCRM and plot the wind
             speed, component wind speeds and bearing.

SeeAlso: timeseries.py
Constraints:
Version: $Rev: 810 $

$Id: plotTimeseries.py 810 2012-02-21 07:52:50Z nsummons $
"""

import os, sys, pdb, logging

import numpy as np
from datetime import datetime

from Utilities.metutils import convert

from timeseries import TimeSeriesFigure, saveFigure

DATEFORMAT = "%Y-%m-%d %H:%M"
INPUT_COLS = ('Time', 'Longitude', 'Latitude',
              'Speed', 'UU', 'VV', 'Bearing',
              'Pressure')

INPUT_FMTS = ('object', 'f', 'f', 'f', 'f', 'f', 'f', 'f')
INPUT_TITLES = ("Time", "Longitude", "Latitude", "Wind speed", "Eastward wind", 
                "Northward wind", "Wind direction", "Sea level pressure")
INPUT_UNIT = ('%Y-%m-%d %H:%M', 'degrees', 'degrees', 'm/s', 'm/s', 'm/s','degrees', 'Pa')
INPUT_CNVT = {
    0: lambda s: datetime.strptime(s.strip(), INPUT_UNIT[0]),
    7: lambda s: convert(float(s.strip() or 0), INPUT_UNIT[7], 'hPa')
}

def loadTimeseriesData(datafile):
    try:
        return np.loadtxt(datafile,
                          comments = "#",
                          delimiter = ',',
                          dtype = {
                            'names': INPUT_COLS,
                            'formats': INPUT_FMTS},
                            converters = INPUT_CNVT)
    except ValueError:
        return np.empty(0, dtype={
                        'names': INPUT_COLS,
                        'formats': INPUT_FMTS})

def plotTimeseries(inputPath, outputPath, locID=None):
    """
    Load the data and pass it to the internal function _plot()
    Input: inputPath - path to the raw timeseries data
           outputPath - path to the location that images should be
                        stored in
           locID - unique identifier for a chosen location. If not
                   given, all files in the input path will be processed
    Output: None. Images are saved to file
    Example: plotTimeseries('/tcrm/output/timeseries','/tcrm/output/plots')
    """
    if locID:
        # Only plot the data corresponding to the requested location ID:
        inputFile = os.path.join(inputPath, 'ts.%s.csv' % (locID))
        outputFile = os.path.join(outputPath, 'ts.%s.png' % (locID))
        inputData = loadTimeseriesData(inputFile)

        stnInfo = {'ID': locID, 'lon': inputData['Longitude'][0],
                    'lat': inputData['Latitude'][0]}
        title = 'Station ID: %s (%6.2f, %6.2f)' % (locID, inputData['Longitude'][0], inputData['Latitude'][0])
        fig = TimeSeriesFigure()
        fig.add(inputData['Time'], inputData['Pressure'], [900,1020], 'Pressure (hPa)', 'Pressure')
        fig.add(inputData['Time'], inputData['Speed'], [0,100], 'Wind speed (m/s)', 'Wind speed')
        fig.add(inputData['Time'], inputData['Bearing'], [0,360], 'Direction', 'Wind direction')

        fig.plot()
        fig.addTitle(title)
        saveFigure(fig, outputFile)
        
    else:
        inputFileList = os.listdir(inputPath)
        for f in inputFileList:
            inputFile = os.path.join(inputPath,f)
            # Here we assume the timeseries files are named ts.<location ID>.dat
            locID = f.rstrip('.csv').lstrip('ts.')
            outputFile = os.path.join(outputPath, '%s.png' % f.rstrip('.csv'))
            inputData = loadTimeseriesData(inputFile)


            stnInfo = {'ID':locID, 'lon':inputData['Longitude'][0], 
                        'lat':inputData['Latitude'][0]}
            title = 'Station ID: %s (%6.2f, %6.2f)' % (locID, inputData['Longitude'][0], 
                                                        inputData['Latitude'][0])

            
            fig = TimeSeriesFigure()
            
            fig.add(inputData['Time'], inputData['Pressure'], [900,1020], 'Pressure (hPa)', 'Sea level pressure')
            fig.add(inputData['Time'], inputData['Speed'], [0,100], 'Wind speed (m/s)', 'Wind speed')
            fig.add(inputData['Time'], inputData['Bearing'], [0,360], 'Direction', 'Wind direction')
            fig.plot()
            fig.addTitle(title)
            saveFigure(fig, outputFile)


if __name__ == '__main__':
    plotTimeseries(sys.argv[1], sys.argv[2])
