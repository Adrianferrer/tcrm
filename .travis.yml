language: python
python:
- '2.7'
sudo: false
env:
  global:
    - GDALINST=$HOME/gdalinstall
    - GDALBUILD=$HOME/gdalbuild
  matrix:
    - GDALVERSION="1.11.5"
    - GDALVERSION="2.0.3"
    - GDALVERSION="2.1.4"
    - GDALVERSION="2.2.1"
    - GDALVERSION="2.2.2"
    - GDALVERSION="trunk"

matrix:
  allow_failures:
    - env: GDALVERSION="trunk"
addons:
  apt:
    packages:
    - build-essential
    - libgeos-c1
    - libhdf5-serial-dev
    - libatlas-base-dev
    - gfortran
    - libnetcdf-dev
    - libblas3gf
    - libc6
    - libgcc1
    - libgfortran3
    - liblapack3gf
    - libstdc++6
    - gdal-bin
    - libgdal-dev
before_install:
  - pip install -U pip
  - pip install wheel
  - . ./scripts/travis_gdal_install.sh
  - export PATH=$GDALINST/gdal-$GDALVERSION/bin:$PATH
  - export LD_LIBRARY_PATH=$GDALINST/gdal-$GDALVERSION/lib:$LD_LIBRARY_PATH
install:
- if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
  -O miniconda.sh; else wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
  -O miniconda.sh; fi
- if [ \"$GDALVERSION\" == \"trunk\" -o $(gdal-config --version) == \"$GDALVERSION\" ]; then echo \"Using gdal $GDALVERSION\"; else echo \"NOT using gdal $GDALVERSION as expected; aborting\"; exit 1; fi
- bash miniconda.sh -b -p $HOME/miniconda
- export PATH="$HOME/miniconda/bin:$PATH"
- export CPLUS_INCLUDE_PATH="/usr/include/gdal"
- export C_INCLUDE_PATH="/usr/include/gdal"
- hash -r
- conda config --set always_yes yes --set changeps1 no
- conda update -q conda
- deps='pip numpy scipy matplotlib basemap shapely nose coverage pycurl GDAL==1.11'
- conda create -p $HOME/py --yes $deps "python=$TRAVIS_PYTHON_VERSION"
- GDAL_CONFIG=$GDALINST/gdal-$GDALVERSION/bin/gdal-config pip install --upgrade --force-reinstall -e .[test,plot]
- export PATH=$HOME/py/bin:$PATH
- pip install pycurl
- pip -v install -r requirements.txt
- pip install coveralls
branches:
  except:
  - config
  - notebooks
script:
- python installer/setup.py build_ext -i
- nosetests -v --with-coverage
after_success: coveralls
notifications:
  slack:
    secure: Ckmwy59ytS1GPRZ5Tmvzad6+W9AzvfjNJAa4orgdKS/WktoK4b9W2rbTHxi8V3hBLIDUCso8vIQi3rVXpWY3cFMvb/uRbXO4GiIW1iua3CKjxd+dEw4E6/8DEknS1qdGJRDhN9/3ucZNvSGHY3EQQDfxb/R+OGd2jT6+jed8pss=
